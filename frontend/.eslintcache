[{"/Users/apple/Web Dev/Vote-It-webapp/frontend/src/index.js":"1","/Users/apple/Web Dev/Vote-It-webapp/frontend/src/reportWebVitals.js":"2","/Users/apple/Web Dev/Vote-It-webapp/frontend/src/pages/Home.js":"3","/Users/apple/Web Dev/Vote-It-webapp/frontend/src/pages/Create_Poll.js":"4","/Users/apple/Web Dev/Vote-It-webapp/frontend/src/pages/Getpoll.js":"5","/Users/apple/Web Dev/Vote-It-webapp/frontend/src/pages/AboutUs.js":"6","/Users/apple/Web Dev/Vote-It-webapp/frontend/src/pages/AllPolls.js":"7","/Users/apple/Web Dev/Vote-It-webapp/frontend/src/components/Barchart/Barchart.js":"8","/Users/apple/Web Dev/Vote-It-webapp/frontend/src/components/AllPollsCard/AllPollsCard.js":"9","/Users/apple/Web Dev/Vote-It-webapp/frontend/src/api/index.js":"10","/Users/apple/Web Dev/Vote-It-webapp/frontend/src/components/NavBar.js/NavBar.js":"11"},{"size":2305,"mtime":1684237951440,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1684227009776,"results":"14","hashOfConfig":"13"},{"size":2569,"mtime":1684243014257,"results":"15","hashOfConfig":"13"},{"size":7650,"mtime":1684227009776,"results":"16","hashOfConfig":"13"},{"size":5330,"mtime":1684227009776,"results":"17","hashOfConfig":"13"},{"size":1287,"mtime":1684243086676,"results":"18","hashOfConfig":"13"},{"size":2662,"mtime":1684227009776,"results":"19","hashOfConfig":"13"},{"size":621,"mtime":1684227009775,"results":"20","hashOfConfig":"13"},{"size":1225,"mtime":1684227009775,"results":"21","hashOfConfig":"13"},{"size":455,"mtime":1684227009774,"results":"22","hashOfConfig":"13"},{"size":2257,"mtime":1684238908985,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"hx1gvc",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/apple/Web Dev/Vote-It-webapp/frontend/src/index.js",["52","53"],"/Users/apple/Web Dev/Vote-It-webapp/frontend/src/reportWebVitals.js",[],"/Users/apple/Web Dev/Vote-It-webapp/frontend/src/pages/Home.js",["54"],"/Users/apple/Web Dev/Vote-It-webapp/frontend/src/pages/Create_Poll.js",["55","56","57","58","59"],"import React, { useState } from 'react';\nimport { NewPoll } from '../api';\nimport { Link } from 'react-router-dom';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport {\n  EmailIcon,\n  EmailShareButton,\n  LinkedinShareButton,\n  RedditIcon,\n  RedditShareButton,\n  TwitterIcon,\n  TwitterShareButton,\n  WhatsappIcon,\n  WhatsappShareButton,\n  LinkedinIcon,\n} from 'react-share';\n\nimport { ShareButtons, ShareCounts, generateShareIcon } from 'react-share';\n\n// const url = 'https://vote-me.netlify.app';\n\nconst url = 'http://localhost:3000';\n\nfunction Create_Poll() {\n  const [title, setTitle] = useState('');\n  const [description, setDesc] = useState('');\n  const [choices, setChoices] = useState(['']);\n  const [error, seterrror] = useState(false);\n  const [success, setsuccess] = useState({});\n  const [loading, setloading] = useState(false);\n  const addAnswer = () => {\n    setChoices([...choices, '']);\n  };\n\n  const removeChoice = (index) => {\n    const newChoices = choices.filter((choice, choiceIndex) => {\n      return choiceIndex !== index;\n    });\n\n    setChoices(newChoices);\n  };\n\n  const onChoiceChange = (index, value) => {\n    const newChoices = choices.map((choice, choiceIndex) => {\n      if (choiceIndex === index) {\n        return value;\n      }\n\n      return choice;\n    });\n\n    setChoices(newChoices);\n  };\n\n  const createPoll = async () => {\n    setloading(true);\n    const newpoll = {\n      title,\n      description,\n      choices,\n    };\n    try {\n      const newpoll_created = await NewPoll(newpoll);\n      setTitle('');\n      setChoices(['']);\n      await setsuccess(newpoll_created.data);\n      seterrror(false);\n    } catch (error) {\n      seterrror(true);\n      console.log(error.message);\n    }\n    setloading(false);\n  };\n\n  const copyToClipboar = () => {\n    navigator.clipboard.writeText(`${url}/polls/${success._id}`);\n  };\n\n  return (\n    <div className=\"container mx-auto my-16 md:my-32 px-6 items-center\">\n      {loading ? (\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'center',\n            marginTop: '4rem',\n          }}\n        >\n          <CircularProgress\n            style={{ textAlign: 'center', display: 'inline-block' }}\n          />\n        </div>\n      ) : (\n        <div className=\"w-full max-w-3xl mx-auto rounded shadow-xl bg-white\">\n          {error ? (\n            <header\n              className=\"px-8 py-5 text-gray-800\"\n              style={{ backgroundColor: '#f05454', color: 'white' }}\n            >\n              *All fields are required and minimum two choices are required\n            </header>\n          ) : null}\n          <header className=\"border-b border-gray-400 px-8 py-5 text-white-800\">\n            <strong>Create poll</strong>\n          </header>\n\n          {success._id ? (\n            <div className=\"py-9 px-8\">\n              <div className=\"w-full mb-2 bg-green-100 text-green-500 border border-green-500 rounded py-3 px-2\">\n                <strong>Poll created successfully - </strong>\n                <Link to={`/polls/${success._id}`}>\n                  {url}/polls/{success._id}\n                </Link>\n                <div style={{ display: 'inline-block', float: 'right' }}>\n                  <FileCopyIcon onClick={copyToClipboar} />\n                </div>\n              </div>\n              <div\n                style={{\n                  width: '100%',\n                  height: '20px',\n                  display: 'flex',\n                  flexDirection: 'row',\n                  justifyContent: 'center',\n                }}\n              >\n                <EmailShareButton\n                  style={{ marginLeft: '1rem', marginRight: '1rem' }}\n                  url={`${url}/polls/${success._id}`}\n                >\n                  <EmailIcon size={45} round />\n                </EmailShareButton>\n                <WhatsappShareButton\n                  style={{ marginLeft: '1rem', marginRight: '1rem' }}\n                  url={`${url}/polls/${success._id}`}\n                >\n                  <WhatsappIcon size={45} round />\n                </WhatsappShareButton>\n                <TwitterShareButton\n                  style={{ marginLeft: '1rem', marginRight: '1rem' }}\n                  url={`${url}/polls/${success._id}`}\n                >\n                  <TwitterIcon size={45} round />{' '}\n                </TwitterShareButton>\n                <RedditShareButton\n                  style={{ marginLeft: '1rem', marginRight: '1rem' }}\n                  url={`${url}/polls/${success._id}`}\n                >\n                  <RedditIcon size={45} round />\n                </RedditShareButton>\n              </div>\n            </div>\n          ) : null}\n\n          {!success._id ? (\n            <div className=\"py-5 px-8\">\n              <div className=\"mb-6\">\n                <label htmlFor=\"title\" className=\"text-sm mb-2 inline-block\">\n                  Enter the title of the poll\n                </label>\n                <input\n                  onChange={(event) => setTitle(event.target.value)}\n                  value={title}\n                  name=\"title\"\n                  id=\"title\"\n                  type=\"text\"\n                  className=\"w-full py-2 border border-gray-400 rounded px-4\"\n                />\n                <label htmlFor=\"desc\" className=\"text-sm mb-2 inline-block\">\n                  Enter description of the poll.\n                </label>\n                <textarea\n                  name=\"desc\"\n                  value={description}\n                  onChange={(e) => setDesc(e.target.value)}\n                  rows={10}\n                  className=\"w-full py-2 border border-gray-400 rounded px-4\"\n                />\n              </div>\n              <div className=\"mb-3\">\n                <label className=\"text-sm mb-2 inline-block\">\n                  Enter all the possible answers for this poll\n                </label>\n                {choices.map((choice, index) => (\n                  <div key={index} className=\"w-full flex items-center mb-2\">\n                    <input\n                      onChange={(event) =>\n                        onChoiceChange(index, event.target.value)\n                      }\n                      key={index}\n                      type=\"text\"\n                      value={choice}\n                      className=\"w-full py-2 border border-gray-400 rounded px-4\"\n                    />\n                    <button\n                      onClick={() => removeChoice(index)}\n                      class=\"bg-red-500 hover:bg-red-400 text-white font-bold py-2 px-4 border-b-4 border-red-700 hover:border-red-500 rounded\"\n                    >\n                      Remove\n                    </button>\n                  </div>\n                ))}\n              </div>\n              <button\n                onClick={addAnswer}\n                class=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\"\n              >\n                Add Option\n              </button>\n              <div className=\"mt-12 mb-6 text-center\">\n                <button\n                  onClick={createPoll}\n                  class=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\"\n                >\n                  Create Poll\n                </button>\n              </div>\n            </div>\n          ) : null}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Create_Poll;\n",["60","61"],"/Users/apple/Web Dev/Vote-It-webapp/frontend/src/pages/Getpoll.js",["62","63","64"],"import React, { useState, useEffect } from 'react';\nimport { CastVote, GetPoll } from '../api';\nimport Barchart from '../components/Barchart/Barchart';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Pusher from 'pusher-js';\n\nfunction Getpoll(props) {\n  const pollID = props.props.match.params.poll;\n\n  const [poll, setpoll] = useState(null);\n  const [voted, setVoted] = useState(false);\n  const [AlltotalVotes, setAllTotalvotes] = useState(0);\n  const [maindata, setmaindata] = useState(null);\n  const [loading, setloading] = useState(false);\n  const [chartData, setChartData] = useState({});\n\n  const newFetch = () => {\n    setloading(true);\n    GetPoll(pollID)\n      .then((res) => {\n        const newdata = res.data;\n        setpoll(newdata);\n        setmaindata(newdata);\n\n        const choices = newdata.choices;\n        var labels = [];\n        const chart_name = newdata.title;\n        var data = [];\n        var a = 0;\n        for (a = 0; a < choices.length; a++) {\n          labels[a] = choices[a].name;\n          data[a] = choices[a].count;\n        }\n        const temp = {\n          labels: labels,\n          datasets: [\n            {\n              label: chart_name,\n              data: data,\n              backgroundColor: [\n                '#845ec2',\n                '#ffc75f',\n                '#ff5e78',\n                '#6ffc03',\n                '#f70240',\n                '#e6acbb',\n                '#ecfc0a',\n              ],\n            },\n          ],\n        };\n        setChartData(temp);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    setloading(false);\n  };\n\n  const pusherData = () => {\n    Pusher.logToConsole = true;\n\n    var pusher = new Pusher('cc27400a96c16f796300', {\n      cluster: 'us3',\n    });\n\n    var channel = pusher.subscribe('polling');\n    channel.bind('poll_created', function (data) {\n      const temp = data;\n\n      const choices = temp.choices;\n      var labels = [];\n      const chart_name = temp.title;\n      var data = [];\n      var a = 0;\n      for (a = 0; a < choices.length; a++) {\n        labels[a] = choices[a].name;\n        data[a] = choices[a].count;\n      }\n      const temp_ = {\n        labels: labels,\n        datasets: [\n          {\n            label: chart_name,\n            data: data,\n            backgroundColor: [\n              '#845ec2',\n              '#ffc75f',\n              '#ff5e78',\n              '#6ffc03',\n              '#f70240',\n              '#e6acbb',\n              '#ecfc0a',\n            ],\n          },\n        ],\n      };\n      setChartData(temp_);\n\n      setmaindata(temp);\n      if (data) {\n        let totalVotes = 0;\n        temp.choices.forEach((choice) => {\n          totalVotes += choice.count;\n        });\n        setAllTotalvotes(totalVotes);\n      }\n    });\n  };\n\n  useEffect(() => {\n    newFetch();\n    pusherData();\n  }, []);\n\n  const getChoicePercentage = (selectedChoice) => {\n    if (AlltotalVotes === 0) {\n      return 0;\n    }\n    return Math.round((selectedChoice.count / AlltotalVotes) * 100);\n  };\n\n  const vote = async (choice) => {\n    const currentchoiceList = maindata.choices;\n    const choice_be_updated = currentchoiceList.find((x) => x._id === choice);\n    choice_be_updated.count += 1;\n    const updated_poll = {\n      ...maindata,\n      choice_be_updated,\n    };\n\n    // setpoll(updated_poll);\n    const poll_updated = await CastVote(pollID, choice, updated_poll);\n    setVoted(true);\n  };\n\n  return (\n    <div className=\"container mx-auto mt-16 px-5\">\n      {!maindata ? (\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'center',\n            marginTop: '4rem',\n          }}\n        >\n          <CircularProgress />\n        </div>\n      ) : (\n        <div className=\"w-full max-w-3xl mx-auto bg-white shadow\">\n          <header className=\"px-5 py-4 flex justify-between items-center\">\n            <strong>{poll.title}</strong>\n            {voted ? (\n              <strong>\n                <span>{AlltotalVotes} votes Voted !</span>\n              </strong>\n            ) : null}\n          </header>\n\n          {maindata.choices.map((choice) => {\n            return (\n              <div\n                className=\"px-5 py-4 border-t border-gray-400 flex justify-between items-center\"\n                key={choice._id}\n              >\n                {choice.name}\n\n                {voted ? (\n                  <span className=\"text-blue-500\">\n                    {getChoicePercentage(choice)}%\n                  </span>\n                ) : (\n                  <button\n                    className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full\"\n                    onClick={() => vote(choice._id)}\n                  >\n                    Vote\n                  </button>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      )}\n      <div\n        style={{\n          width: '100%',\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginTop: '4rem',\n        }}\n      >\n        {loading ? <CircularProgress /> : <Barchart chartData={chartData} />}\n      </div>\n    </div>\n  );\n}\n\nexport default Getpoll;\n","/Users/apple/Web Dev/Vote-It-webapp/frontend/src/pages/AboutUs.js",["65","66"],"/Users/apple/Web Dev/Vote-It-webapp/frontend/src/pages/AllPolls.js",["67"],"import React, { useEffect, useState } from 'react';\nimport styles from './style.module.css';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { GetAllPolls } from '../api';\nimport AllPollsCard from '../components/AllPollsCard/AllPollsCard';\nimport moment from 'moment';\n\nfunction AllPolls() {\n  const [loading, setLoading] = useState(false);\n  const [allPolls, setAllPolls] = useState([]);\n\n  useEffect(() => {\n    fetchAllPolls();\n  }, []);\n\n  const fetchAllPolls = async () => {\n    setLoading(true);\n    try {\n      let res = await GetAllPolls();\n      if (res.data) {\n        setAllPolls(res.data);\n      }\n    } catch (error) {\n      console.log(error);\n      setAllPolls([]);\n    }\n    setLoading(false);\n  };\n\n  const getVotesCount = (item) => {\n    let sum = 0;\n    item?.choices?.map((choice) => (sum += choice.count));\n    return sum;\n  };\n\n  return (\n    <div\n      style={{\n        paddingBottom: '2rem',\n        overflow: 'auto',\n        height: 'calc(100vh - 80px)',\n      }}\n    >\n      {loading ? (\n        <>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'center',\n              width: '100%',\n            }}\n          >\n            <CircularProgress\n              style={{ textAlign: 'center', display: 'inline-block' }}\n            />\n          </div>\n        </>\n      ) : (\n        <>\n          {allPolls.length > 0 ? (\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'flex-start',\n                marginTop: '1rem',\n                width: '100%',\n              }}\n            >\n              {allPolls.map((item, i) => (\n                <AllPollsCard\n                  key={i}\n                  title={item?.title}\n                  timestamp={moment(item?.createdAt).fromNow()}\n                  votes={`Votes : ${getVotesCount(item)}`}\n                  desc={item?.description}\n                  id={item?._id}\n                />\n              ))}\n            </div>\n          ) : (\n            <>\n              <div\n                style={{\n                  display: 'flex',\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  marginTop: '4rem',\n                  height: '100%',\n                }}\n              >\n                No Polls Found\n              </div>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default AllPolls;\n","/Users/apple/Web Dev/Vote-It-webapp/frontend/src/components/Barchart/Barchart.js",["68","69"],"import React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport styles from './barchat.module.css';\n\nfunction Barchart(props) {\n  const { chartData } = props;\n\n  return (\n    <div className={styles.chart}>\n      <Bar\n        data={chartData}\n        height={300}\n        width={600}\n        options={{\n          maintainAspectRatio: false,\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  beginAtZero: true,\n                },\n              },\n            ],\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Barchart;\n","/Users/apple/Web Dev/Vote-It-webapp/frontend/src/components/AllPollsCard/AllPollsCard.js",["70"],"import React from 'react';\nimport styles from './AllPollsCard.module.css';\nimport { Link, useHistory } from 'react-router-dom';\n\nfunction AllPollsCard({ title, timestamp, votes, desc, id }) {\n  const history = useHistory();\n  return (\n    <div className={styles.root}>\n      <header className=\"border-b border-gray-400 px-8 py-5 text-white-800\">\n        <div className={styles.flexbox}>\n          <strong>\n            <h1 className={styles.title}>{title || 'title'}</h1>\n          </strong>\n          <p className={styles.time}>{timestamp || 'test'}</p>\n        </div>{' '}\n      </header>\n      <div className={styles.desc}>\n        <p>{desc || 'This is Description'}</p>\n      </div>\n      <hr />\n      <div\n        className={styles.flexbox}\n        style={{ padding: '0 2rem', marginTop: '0.5rem' }}\n      >\n        <strong>\n          <h1 className={styles.title}>{votes || 'Votes : 0'}</h1>\n        </strong>\n        <button\n          onClick={() => history.push(`/polls/${id}`)}\n          class=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-1 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\"\n        >\n          View\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default AllPollsCard;\n","/Users/apple/Web Dev/Vote-It-webapp/frontend/src/api/index.js",[],"/Users/apple/Web Dev/Vote-It-webapp/frontend/src/components/NavBar.js/NavBar.js",["71"],{"ruleId":"72","severity":1,"message":"73","line":4,"column":25,"nodeType":"74","messageId":"75","endLine":4,"endColumn":29},{"ruleId":"76","severity":1,"message":"77","line":48,"column":13,"nodeType":"78","endLine":48,"endColumn":28},{"ruleId":"79","severity":1,"message":"80","line":65,"column":11,"nodeType":"78","endLine":65,"endColumn":71},{"ruleId":"72","severity":1,"message":"81","line":9,"column":3,"nodeType":"74","messageId":"75","endLine":9,"endColumn":22},{"ruleId":"72","severity":1,"message":"82","line":16,"column":3,"nodeType":"74","messageId":"75","endLine":16,"endColumn":15},{"ruleId":"72","severity":1,"message":"83","line":19,"column":10,"nodeType":"74","messageId":"75","endLine":19,"endColumn":22},{"ruleId":"72","severity":1,"message":"84","line":19,"column":24,"nodeType":"74","messageId":"75","endLine":19,"endColumn":35},{"ruleId":"72","severity":1,"message":"85","line":19,"column":37,"nodeType":"74","messageId":"75","endLine":19,"endColumn":54},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":76,"column":11,"nodeType":"74","messageId":"92","endLine":76,"endColumn":15},{"ruleId":"93","severity":1,"message":"94","line":116,"column":6,"nodeType":"95","endLine":116,"endColumn":8,"suggestions":"96"},{"ruleId":"72","severity":1,"message":"97","line":135,"column":11,"nodeType":"74","messageId":"75","endLine":135,"endColumn":23},{"ruleId":"72","severity":1,"message":"98","line":3,"column":8,"nodeType":"74","messageId":"75","endLine":3,"endColumn":18},{"ruleId":"79","severity":1,"message":"80","line":34,"column":11,"nodeType":"78","endLine":34,"endColumn":70},{"ruleId":"72","severity":1,"message":"99","line":2,"column":8,"nodeType":"74","messageId":"75","endLine":2,"endColumn":14},{"ruleId":"72","severity":1,"message":"100","line":1,"column":17,"nodeType":"74","messageId":"75","endLine":1,"endColumn":25},{"ruleId":"72","severity":1,"message":"101","line":1,"column":27,"nodeType":"74","messageId":"75","endLine":1,"endColumn":36},{"ruleId":"72","severity":1,"message":"73","line":3,"column":10,"nodeType":"74","messageId":"75","endLine":3,"endColumn":14},{"ruleId":"72","severity":1,"message":"102","line":2,"column":10,"nodeType":"74","messageId":"75","endLine":2,"endColumn":23},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component Create_Poll must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'LinkedinShareButton' is defined but never used.","'LinkedinIcon' is defined but never used.","'ShareButtons' is defined but never used.","'ShareCounts' is defined but never used.","'generateShareIcon' is defined but never used.","no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-redeclare","'data' is already defined.","redeclared","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'newFetch'. Either include it or remove the dependency array.","ArrayExpression",["105"],"'poll_updated' is assigned a value but never used.","'githubIcon' is defined but never used.","'styles' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'BrowserRouter' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},"Update the dependencies array to be: [newFetch]",{"range":"108","text":"109"},[2871,2873],"[newFetch]"]